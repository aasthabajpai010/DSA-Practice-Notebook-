class Solution {
public:
ListNode* middleNode(ListNode* head) {
      ListNode* slow=head;
      ListNode* fast=head->next;
      while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
      }        
      return slow;
        
    }
    ListNode* mergeTwoLists(ListNode* head1, ListNode* head2) {
        if(head1==NULL || head2==NULL){
            return head1==NULL ? head2 : head1;
        }
        if(head1->val<=head2->val){
            head1->next=mergeTwoLists(head1->next,head2);  
            return head1;      
            }
            else {
                head2->next=mergeTwoLists(head2->next,head1);
                return head2;
            }
        
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
       ListNode* middle= middleNode(head);
        ListNode* left=head;
       ListNode* right=middle->next;
        middle->next=NULL;
        left=sortList(left);
        right=sortList(right);
     return mergeTwoLists(left,right); 
        
    }
};
